{
  "swagger": "2.0",
  "info": {
    "title": "ebookstore Api",
    "description": "ebookstore Api",
    "version": "1.0.0"
  },
  "host": "localhost:3000",
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "paths": {
    "/api/books/": {
      "post": {
        "tags": [
          "Books"
        ],
        "summary": "Insert a new book into the database",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Books"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Book created successfully",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "ObjectId"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "get": {
        "tags": [
          "Books"
        ],
        "summary": "Get all books in the database",
        "description": "",
        "responses": {
          "200": {
            "description": "List of books",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Books"
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "404": {
            "description": "No books found"
          }
        }
      }
    },
    "/api/books/bulk": {
      "post": {
        "tags": [
          "Books"
        ],
        "summary": "Insert multiple books into the database",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Books"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Books inserted successfully",
            "schema": {
              "type": "object",
              "properties": {
                "newBookIds": {
                  "type": "array",
                  "example": [
                    "ObjectId"
                  ],
                  "items": {
                    "type": "string"
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Failed to add books"
          }
        }
      }
    },
    "/api/books/{id}": {
      "put": {
        "tags": [
          "Books"
        ],
        "summary": "Update a book by ID",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Books"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Book updated successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Book not found"
          },
          "500": {
            "description": "Failed to update book"
          }
        }
      },
      "get": {
        "tags": [
          "Books"
        ],
        "summary": "Get a book by ID",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Book found",
            "schema": {
              "$ref": "#/definitions/Books"
            }
          },
          "400": {
            "description": "Invalid ID format"
          },
          "404": {
            "description": "Book not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Books"
        ],
        "summary": "Delete a book by ID",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Book deleted successfully"
          },
          "400": {
            "description": "Invalid ID format"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Book not found"
          },
          "500": {
            "description": "Failed to delete book"
          }
        }
      }
    },
    "/api/books/update/{id}": {
      "post": {
        "tags": [
          "Books"
        ],
        "summary": "Update a book by ID",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Books"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Book updated successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Book not found"
          },
          "500": {
            "description": "Failed to update book"
          }
        }
      }
    },
    "/api/reviews/": {
      "post": {
        "tags": [
          "Reviews"
        ],
        "summary": "Create a new review",
        "description": "",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Review"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Review created successfully",
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "ObjectId"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Validation error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Failed to create review"
          }
        }
      },
      "get": {
        "tags": [
          "Reviews"
        ],
        "summary": "Get all reviews",
        "description": "",
        "responses": {
          "200": {
            "description": "Reviews retrieved successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Review"
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Failed to retrieve reviews"
          }
        }
      }
    },
    "/api/reviews/{id}": {
      "put": {
        "tags": [
          "Reviews"
        ],
        "summary": "Update a review by ID",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Review"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Review updated successfully"
          },
          "400": {
            "description": "Invalid ID format"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Review not found"
          },
          "500": {
            "description": "Failed to update review"
          }
        }
      },
      "get": {
        "tags": [
          "Reviews"
        ],
        "summary": "Get a single review by ID",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Review retrieved successfully",
            "schema": {
              "$ref": "#/definitions/Review"
            }
          },
          "404": {
            "description": "Review not found"
          },
          "500": {
            "description": "Failed to retrieve review"
          }
        }
      },
      "delete": {
        "tags": [
          "Reviews"
        ],
        "summary": "Delete a review by ID",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Review deleted successfully"
          },
          "400": {
            "description": "Invalid ID format"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Review not found"
          },
          "500": {
            "description": "Failed to delete review"
          }
        }
      }
    },
    "/api/cart/": {
      "post": {
        "tags": [
          "Store"
        ],
        "summary": "Create a new cart",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Cart"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Cart created successfully",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "ObjectId"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Failed to add books"
          }
        }
      },
      "get": {
        "tags": [
          "Store"
        ],
        "summary": "Retrieve all items in the cart",
        "description": "",
        "responses": {
          "200": {
            "description": "Returns a list of all cart items",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Cart"
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "404": {
            "description": "Cart not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/cart/{id}": {
      "put": {
        "tags": [
          "Store"
        ],
        "summary": "Update a cart by ID",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Cart"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cart updated successfully",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Cart updated."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Cart not found"
          },
          "500": {
            "description": "Failed to update the cart"
          }
        }
      },
      "get": {
        "tags": [
          "Store"
        ],
        "summary": "Get a single cart by ID",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Cart ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Cart retrieved successfully",
            "schema": {
              "$ref": "#/definitions/Cart"
            }
          },
          "404": {
            "description": "Cart not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "Store"
        ],
        "summary": "Delete a cart by ID",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Cart deleted successfully",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Cart deleted successfully"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Invalid id format"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Cart does not exist"
          },
          "500": {
            "description": "Failed to delete cart"
          }
        }
      }
    },
    "/api/users/": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Register a user",
        "description": "",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Users"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get all users in the database",
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/users/bulk": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Register multiple users",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Users"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a user given their ID",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update a user by ID",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Users"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete a user given their ID",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    }
  },
  "definitions": {
    "Books": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "example": "The Silent Shore"
        },
        "author": {
          "type": "string",
          "example": "Elaine Morgan"
        },
        "stock": {
          "type": "number",
          "example": 3
        },
        "pages": {
          "type": "number",
          "example": 310
        },
        "description": {
          "type": "string",
          "example": "A gripping tale of survival and secrets on a desolate coastline."
        },
        "genre": {
          "type": "string",
          "example": "Mystery"
        },
        "tags": {
          "type": "array",
          "example": [
            "suspense",
            "thriller",
            "coastal"
          ],
          "items": {
            "type": "string"
          }
        },
        "price": {
          "type": "number",
          "example": 14.99
        }
      }
    },
    "Users": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "example": "TestUser"
        },
        "password": {
          "type": "string",
          "example": "ThisIsAPassword"
        },
        "email": {
          "type": "string",
          "example": "example@test.com"
        },
        "shipping_address": {
          "type": "object",
          "properties": {
            "street": {
              "type": "string",
              "example": "123 Roosevelt Lane"
            },
            "city": {
              "type": "string",
              "example": "Anchorage"
            },
            "state": {
              "type": "string",
              "example": "AK"
            },
            "zip": {
              "type": "string",
              "example": "99501"
            }
          }
        }
      }
    },
    "Cart": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "example": "643a6b29f3d5b8d2d8e4d531"
        },
        "books": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "643a6b29f3d5b8d2d8e4d531"
              },
              "quantity": {
                "type": "number",
                "example": 1
              }
            }
          }
        },
        "totalPrice": {
          "type": "number",
          "example": 49.98
        }
      }
    },
    "Review": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "example": "Excellent read"
        },
        "comment": {
          "type": "string",
          "example": "I really enjoyed the character development and plot."
        },
        "rating": {
          "type": "number",
          "example": 4.5
        },
        "author": {
          "type": "string",
          "example": "609e12672f8fb814c89f9e3b"
        },
        "bookId": {
          "type": "string",
          "example": "609e127b2f8fb814c89f9e3d"
        }
      }
    }
  }
}